// unified test suite - complete gson testing
// tests both gson_util and gson api with real world scenarios
// includes file operations and edge cases

import_code("gson_object.src")
import_code("gson.src")
import_code("gson_util.src")

// test framework
TestResults = {"total": 0, "passed": 0, "failed": 0, "failures": []}

test_assert = function(condition, description)
    TestResults.total = TestResults.total + 1
    if condition then
        TestResults.passed = TestResults.passed + 1
        print("[ok] " + description)
        return true
    else
        TestResults.failed = TestResults.failed + 1
        TestResults.failures.push(description)
        print("[ko] " + description)
        return false
    end if
end function

print("=== unified gson test suite ===")
print("testing both gson_util core and gson api")
print("includes file operations and comprehensive edge cases")
print("")

// =============================================================================
// core gson_util tests
// =============================================================================

print("=== testing gson_util core engine ===")

// test stringify primitives
test_assert(GSON.Stringify(null) == "null", "stringify null")
test_assert(GSON.Stringify(42) == "42", "stringify number") 
test_assert(GSON.Stringify("hello") == "'hello'", "stringify string")
test_assert(GSON.Stringify("") == "''", "stringify empty string")
test_assert(GSON.Stringify("say 'hello'") == "'say \'hello\''", "stringify escaped quotes")

// test stringify arrays
test_assert(GSON.Stringify([]) == "[]", "stringify empty array")
test_assert(GSON.Stringify([1, 2, 3]).indexOf("[") == 0, "stringify array format")
mixed_arr = [1, "hello", null]
mixed_result = GSON.Stringify(mixed_arr)
test_assert(mixed_result.indexOf("1") != -1 and mixed_result.indexOf("'hello'") != -1, "stringify mixed array")

// test stringify objects  
test_assert(GSON.Stringify(GSON_OBJECT.New) == "{}", "stringify empty object")
simple_obj = {"name": "test", "value": 42}
obj_result = GSON.Stringify(simple_obj)
test_assert(obj_result.indexOf("'name'") != -1 and obj_result.indexOf("'test'") != -1, "stringify object keys and values")

// test parse primitives
test_assert(GSON.Parse("null") == null, "parse null")
test_assert(GSON.Parse("42") == 42, "parse number")
test_assert(GSON.Parse("'hello'") == "hello", "parse string")
test_assert(GSON.Parse("''") == "", "parse empty string")

// test parse arrays
parsed_arr = GSON.Parse("[1, 2, 3]")
test_assert(typeof(parsed_arr) == "list" and parsed_arr.len == 3, "parse array structure")
test_assert(parsed_arr[0] == 1 and parsed_arr[2] == 3, "parse array values")

// test parse objects
parsed_obj = GSON.Parse("{'name': 'test', 'value': 42}")
test_assert(typeof(parsed_obj) == "map" and parsed_obj.indexes.len == 2, "parse object structure")
test_assert(parsed_obj["name"] == "test" and parsed_obj["value"] == 42, "parse object values")

// test round trip conversion
original = {"users": [{"name": "john", "active": 1}, {"name": "jane", "active": 0}]}
gson_str = GSON.Stringify(original)
parsed_back = GSON.Parse(gson_str)
test_assert(parsed_back["users"][0]["name"] == "john", "round trip complex object")
test_assert(parsed_back["users"][1]["active"] == 0, "round trip boolean values")

// test special characters and edge cases
special_str = "Line 1" + char(10) + "Line 2"
special_obj = {"newline": special_str, "quote": "say 'hi'"}
special_gson = GSON.Stringify(special_obj)
special_parsed = GSON.Parse(special_gson)
test_assert(special_parsed["quote"] == "say 'hi'", "special characters preserved")

print("")

// =============================================================================
// gson api tests
// =============================================================================

print("=== testing gson api layer ===")

// test gson item creation and basic operations
item = GSON_OBJECT.New
test_assert(typeof(item) == "map" and item.hasIndex("__isa"), "gson item creation")

// test object mode
item.Set("name", "test")
item.Set("value", 42)
test_assert(item.Get("name") == "test", "gson item object get/set")
test_assert(item.len() == 2, "gson item object length")

// test array mode
arr_item = GSON_OBJECT.New
arr_item.Set(0, "first")
arr_item.Set(1, "second")
test_assert(arr_item.Get(0) == "first", "gson item array access")
test_assert(arr_item.len() == 2, "gson item array length")

// test array push
arr_item.push("third")
test_assert(arr_item.Get(2) == "third", "gson item push method")
test_assert(arr_item.len() == 3, "gson item length after push")

// test parsing with gson api
parse_test = GSON.Parse("{'data': [1, 2, 3], 'active': 1}")
test_assert(TypeOf(parse_test) == "gsonboject", "gson parse returns gson item")
test_assert(parse_test.Get(1) == 2, "gson parse nested access")

// test gson stringify api
api_str = GSON.Stringify({"test": "value"})
test_assert(api_str.indexOf("'test'") != -1, "gson api stringify")

print("")


// =============================================================================
// performance and stress tests
// =============================================================================

print("=== performance and stress tests ===")

// large array test
large_arr = []
for i in range(0, 99)
    large_arr.push("item_" + i)
end for

start_time = time
large_str = GSON.Stringify(large_arr)
stringify_time = time - start_time

start_time = time
large_parsed = GSON.Parse(large_str)
parse_time = time - start_time

test_assert(large_parsed.len == 100, "large array stress test length")
test_assert(large_parsed[0] == "item_0" and large_parsed[99] == "item_99", "large array stress test content")
print("   performance: stringify " + stringify_time + "ms, parse " + parse_time + "ms")

// deep nesting test
deep_obj = {"level1": {"level2": {"level3": {"level4": {"value": "deep"}}}}}
deep_str = GSON.Stringify(deep_obj)
deep_parsed = GSON.Parse(deep_str)
test_assert(deep_parsed["level1"]["level2"]["level3"]["level4"]["value"] == "deep", "deep nesting test")

// complex mixed data
complex_data = {
    "meta": {
        "version": "2.0",
        "features": ["json", "parsing", "stringify"],
    },
    "users": [
        {"id": 1, "name": "alice", "admin": 1},
        {"id": 2, "name": "bob", "admin": 0},
    ],
    "settings": {
        "debug": 0,
        "timeout": 30,
        "endpoints": [],
    },
}

complex_str = GSON.Stringify(complex_data)
complex_parsed = GSON.Parse(complex_str)
test_assert(complex_parsed["users"][0]["name"] == "alice", "complex data structure test")
test_assert(complex_parsed["meta"]["features"][1] == "parsing", "complex nested array test")

print("")

// =============================================================================
// edge cases and error handling
// =============================================================================

print("=== edge cases and error handling ===")

// empty input handling
test_assert(GSON.Parse("") == null, "empty string parsing")
test_assert(GSON.Parse(null) == null, "null input parsing")

// malformed input handling (should not crash)
malformed_inputs = [
    "{'key'",
    "[1, 2",
    "{'key': }",
    "{,}",
    "{'': 'value'}",
]

for malformed in malformed_inputs
    try_result = GSON.Parse(malformed)
    // should not crash, any result is acceptable
    test_assert(true, "malformed input handled: " + malformed)
end for

// whitespace handling
whitespace_test = " { 'key' : 'value' } "
ws_result = GSON.Parse(whitespace_test)
test_assert(ws_result["key"] == "value", "whitespace handling")

// special quote combinations
quote_test = "{'text': 'He said \'hello\' to me'}"
quote_result = GSON.Parse(quote_test)
test_assert(quote_result["text"].indexOf("hello") != -1, "nested quote handling")

print("")

// =============================================================================
// final results
// =============================================================================

print("=" * 60)
print("UNIFIED GSON TEST RESULTS")
print("=" * 60)
print("Total Tests: " + TestResults.total)
print("Passed: " + TestResults.passed + " (ok)")
print("Failed: " + TestResults.failed + " (ko)")

if TestResults.total > 0 then
    success_rate = (TestResults.passed * 100) / TestResults.total
    print("Success Rate: " + success_rate + "%")
end if

if TestResults.failed > 0 then
    print("")
    print("Failed Tests:")
    for failure in TestResults.failures
        print("  - " + failure)
    end for
else
    print("")
    print("ALL TESTS PASSED!")
    print("both core engine and api layer working perfectly")
end if

print("=" * 60)
