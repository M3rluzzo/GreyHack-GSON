// gson module - json for greyscript
// handles objects and arrays with same interface
GSON = {}

// main api - parse, stringify, file operations
// =============================================================================
// parse gson string and return gson item
GSON.parse = function(gson_string)
    if gson_string == null or gson_string.len == 0 then return null
    
    locals.result = GsonUtil.parse(gson_string)
    return self._convert_to_gson_item(locals.result)
end function

// recursive converter - turns raw data into gson items
GSON._convert_to_gson_item = function(data)
    if typeof(data) == "map" then
        locals.item = new GSONItem
        for key in data.indexes
            locals.item.set(key, self._convert_to_gson_item(data[key]))
        end for
        return locals.item
    else if typeof(data) == "list" then
        locals.item = new GSONItem
        for i in range(0, data.len - 1)
            locals.item.set(i, self._convert_to_gson_item(data[i]))
        end for
        return locals.item
    else
        // for primitives, return them directly
        return data
    end if
end function

// stringify any data to gson
GSON.stringify = function(data, pretty)
    if typeof(data) == "map" and data.hasIndex("stringify") then
        // it's a gson item
        return data.stringify(pretty)
    else
        if pretty then
            return GsonUtil.stringify(data)
        else
            return GsonUtil.stringify(data, 0).replace(char(10), "").replace("    ", "")
        end if
    end if
end function

// file operations
// =============================================================================
// finds last occurrence of character
GSON._last_index_of = function(s, char, pos)
    if pos == null then pos = s.len - 1
    if pos < 0 then return null
    if s[pos] == char then return pos
    return self._last_index_of(s, char, pos - 1)
end function

// read gson from file
GSON.read = function(computer, path, file = null)
    if locals.file == null then
		locals.file = locals.computer.File(locals.path)
		if locals.file == null then
			return null
		end if
	end if

    locals.content = locals.file.get_content
    if locals.content.len == 0 then
        return new GSONItem
    end if

    return self.parse(locals.content)
end function

// write gson to file with formatting, can return File or error string
GSON.write = function(computer, path, data, file=null)
	// extract raw data if it's a gson item
    locals.raw_data = locals.data
    if typeof(data) == "map" and locals.data.hasIndex("_get_raw") then
        locals.raw_data = data._get_raw()
    end if

    // create directory structure if needed
	if locals.file == null then
		locals.idx = self._last_index_of(locals.path, "/")
		if locals.idx != null then
			// handle root directory case properly
			if locals.idx == 0 then
				locals.dir = "/"
				locals.name = locals.path[1:]
			else
				locals.dir = locals.path[0:locals.idx]
				locals.name = locals.path[locals.idx + 1:]
			end if

			if not locals.computer.File(locals.path) then
				locals.file = locals.computer.touch(locals.dir, locals.name)
				if typeof(locals.file) == "string" then
					return locals.file  // return error string from touch
				end if
				locals.file = locals.computer.File(locals.path)
			else
				locals.file = locals.computer.File(locals.path)
			end if
		else
			// no slash found, assume current directory
			locals.file = locals.computer.touch(".", locals.path)
			if typeof(locals.file) == "string" then
				return locals.file  // return error string
			end if
			locals.file = locals.computer.File(locals.path)
		end if
	end if

	if typeof(locals.file) == "file"  then
		// write with pretty formatting for files
		locals.content = GsonUtil.stringify(locals.raw_data)
		locals.file.set_content(locals.content)
	end if

    return locals.file
end function
