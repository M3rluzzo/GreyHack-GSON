// gson module - json for greyscript
// handles objects and arrays with same interface
GSON = {}

// gson item - single type for objects and arrays
// =============================================================================
// main prototype - does both objects and arrays
globals.GSONItemProto = {}

// mode switcher - handles object/array transition
globals.GSONItemProto._ensure_mode = function(is_array_mode)
    if self._is_array != is_array_mode then
        self._is_array = is_array_mode
        if is_array_mode and not self._array_data then
            self._array_data = []
        else if not is_array_mode and not self._data then
            self._data = {}
        end if
    end if
end function

// helper for numeric key detection
globals.GSONItemProto._is_numeric_key = function(key)
    return typeof(key) == "number"
end function

// getter - works for both objects and arrays
globals.GSONItemProto.get = function(key)
    locals.is_numeric = self._is_numeric_key(key)
    self._ensure_mode(is_numeric)
    
    if self._is_array then
        if key >= 0 and key < self._array_data.len then
            return self._array_data[key]
        end if
        return null
    else
        if self._data.hasIndex(key) then
            return self._data[key]
        end if
        return null
    end if
end function

// setter - works for both objects and arrays
globals.GSONItemProto.set = function(key, value) 
    locals.is_numeric = self._is_numeric_key(key)
    self._ensure_mode(is_numeric)
    
    if self._is_array then
        // extend array if needed
        while self._array_data.len <= key
            self._array_data.push(null)
        end while
        self._array_data[key] = value
    else
        self._data[key] = value
    end if
end function

// array methods - add, length, keys, has
globals.GSONItemProto.push = function(value)
    self._ensure_mode(true)
    self._array_data.push(value)
end function

globals.GSONItemProto.len = function()
    if self._is_array then
        return self._array_data.len
    else
        return self._data.indexes.len
    end if
end function

globals.GSONItemProto.keys = function()
    if self._is_array then
        locals.result = []
        for i in range(0, self._array_data.len - 1)
            locals.result.push(i)
        end for
        return locals.result
    end if
    return self._data.indexes
end function

globals.GSONItemProto.has = function(key)
    locals.is_numeric = self._is_numeric_key(key)
    if self._is_array and is_numeric then
        return key >= 0 and key < self._array_data.len
    end if
    return self._data.hasIndex(key)
end function

// stringify - converts to gson string
globals.GSONItemProto.stringify = function(pretty)
    locals.raw = null
    if self._is_array then
        locals.raw = self._array_data
    else
        locals.raw = self._data
    end if
    
    locals.indent_param = 0
    if pretty then locals.indent_param = 0 else locals.indent_param = -1
    
    locals.result = GsonUtil.stringify(locals.raw, locals.indent_param)
    
    if pretty then
        return locals.result
    else
        return locals.result.replace(char(10), "").replace("    ", "")
    end if
end function

// raw data access - for internal use
globals.GSONItemProto._get_raw = function()
    if self._is_array then
        return self._array_data
    else
        return self._data
    end if
end function

// creates gson item instances
GSONItem = function()
    locals.instance = {"__isa": globals.GSONItemProto}
    locals.instance._data = {}
    locals.instance._array_data = []
    locals.instance._is_array = false
    return locals.instance
end function

// main api - parse, stringify, file operations
// =============================================================================
// parse gson string and return gson item
GSON.parse = function(gson_string)
    if gson_string == null or gson_string.len == 0 then return null
    
    locals.result = GsonUtil.parse(gson_string)
    return self._convert_to_gson_item(locals.result)
end function

// recursive converter - turns raw data into gson items
GSON._convert_to_gson_item = function(data)
    if typeof(data) == "map" then
        locals.item = GSONItem()
        for key in data.indexes
            locals.item.set(key, self._convert_to_gson_item(data[key]))
        end for
        return locals.item
    else if typeof(data) == "list" then
        locals.item = GSONItem()
        for i in range(0, data.len - 1)
            locals.item.set(i, self._convert_to_gson_item(data[i]))
        end for
        return locals.item
    else
        // for primitives, return them directly
        return data
    end if
end function

// stringify any data to gson
GSON.stringify = function(data, pretty)
    if typeof(data) == "map" and data.hasIndex("stringify") then
        // it's a gson item
        return data.stringify(pretty)
    else
        if pretty then
            return GsonUtil.stringify(data)
        else
            return GsonUtil.stringify(data, 0).replace(char(10), "").replace("    ", "")
        end if
    end if
end function

// file operations
// =============================================================================
// finds last occurrence of character
GSON._last_index_of = function(s, char, pos)
    if pos == null then pos = s.len - 1
    if pos < 0 then return null
    if s[pos] == char then return pos
    return self._last_index_of(s, char, pos - 1)
end function

// read gson from file
GSON.read = function(computer, path, file = null)
    if locals.file == null then
		locals.file = locals.computer.File(locals.path)
		if locals.file == null then
			return null
		end if
	end if

    locals.content = locals.file.get_content
    if locals.content.len == 0 then
        return GSONItem()
    end if

    return self.parse(locals.content)
end function

// write gson to file with formatting, can return File or error string
GSON.write = function(computer, path, data, file=null)
	// extract raw data if it's a gson item
    locals.raw_data = locals.data
    if typeof(data) == "map" and locals.data.hasIndex("_get_raw") then
        locals.raw_data = data._get_raw()
    end if

    // create directory structure if needed
	if locals.file == null then
		locals.idx = self._last_index_of(locals.path, "/")
		if locals.idx != null then
			// handle root directory case properly
			if locals.idx == 0 then
				locals.dir = "/"
				locals.name = locals.path[1:]
			else
				locals.dir = locals.path[0:locals.idx]
				locals.name = locals.path[locals.idx + 1:]
			end if

			if not locals.computer.File(locals.path) then
				locals.file = locals.computer.touch(locals.dir, locals.name)
				if typeof(locals.file) == "string" then
					return locals.file  // return error string from touch
				end if
				locals.file = locals.computer.File(locals.path)
			else
				locals.file = locals.computer.File(locals.path)
			end if
		else
			// no slash found, assume current directory
			locals.file = locals.computer.touch(".", locals.path)
			if typeof(locals.file) == "string" then
				return locals.file  // return error string
			end if
			locals.file = locals.computer.File(locals.path)
		end if
	end if

	if typeof(locals.file) == "file"  then
		// write with pretty formatting for files
		locals.content = GsonUtil.stringify(locals.raw_data)
		locals.file.set_content(locals.content)
	end if

    return locals.file
end function

// convenience functions
// =============================================================================
// create new gson item
GSON.item = function()
    return GSONItem()
end function
