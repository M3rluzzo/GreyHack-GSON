TypeOf = function(_obj)
	result = typeof(_obj)
	if result == "map" and _obj.hasIndex("__isa") and _obj.__isa == GSON_OBJECT then
		return "gsonobject"
	end if
	return result
end function

// =============================================================================
// PIP-B0II Framework - Gson (GreyScript Object Notation) Module
// Enhanced JSON with GreyScript-specific features and single quotes
// =============================================================================
GSON = {}

// main api - parse, stringify, file operations
// =============================================================================
GSON.Parse = function(_gsonString)
    if _gsonString == null or _gsonString.len == 0 then return null
    cleanString = GSON_UTIL._StripWhitespace(_gsonString)
    if cleanString.len == 0 then return null

	value = GSON_UTIL._Parse(cleanString)
    return GSON_UTIL._DeepUnescape(value)
end function

// stringify any data to gson
GSON.Stringify = function(_data, _indent = 0)
	result = self._Stringify(_data, _indent, self._GeneratePadding(_indent))
	if _indent == 0 then
		return result.replace(char(10), "").replace("    ", "")
	end if
	return result
end function

GSON._Stringify = function(_obj, _indent, _spaces)
    if _obj == null then return "null"

    obj_type = TypeOf(_obj)
	
    if obj_type == "number" then return "" + _obj
    if obj_type == "string" then return "'" + _obj.replace("'", "\'") + "'"
    if obj_type == "list" then return self._StringifyContainer(_obj, _indent, _spaces, true, "[", "]")
	if obj_type == "gsonobject" or obj_type == "map" then return self._StringifyContainer(_obj, _indent, _spaces, false, "{", "}")
	exit("Something went very wrong..")
    return "nope"
end function

GSON._StringifyContainer = function(_container, _indent, _spaces, _isArray, _openChar, _closeChar)
    if (_isArray and _container.len == 0) or (not _isArray and _container.indexes.len == 0) then
        return _openChar + _closeChar
    end if

    nextIndent = _indent + 1
    nextSpaces = self._GeneratePadding(nextIndent)
    newline = char(10)

    parts = []
    if _isArray then
        for item in _container
            parts.push(nextSpaces + self._Stringify(item, nextIndent, nextSpaces))
        end for
    else
        for key in _container.indexes
            value_str = self._Stringify(_container[key], nextIndent, nextSpaces)
            parts.push(nextSpaces + "'" + key + "': " + value_str)
        end for
    end if

    return _openChar + newline + parts.join("," + newline) + newline + _spaces + _closeChar
end function

// padding generation - string multiplication
GSON._GeneratePadding = function(_indent)
    if _indent == 0 then return ""
    return ("    " * _indent)
end function

// file operations
// =============================================================================
// To be Remimplemented
